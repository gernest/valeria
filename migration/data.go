// Code generated by go-bindata.
// sources:
// scripts/up.ql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsUpQl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x4f\x4f\x32\x31\x10\xc6\xef\xfd\x14\x73\x5c\x12\x12\xee\x2f\x79\x0f\x0b\x56\xd3\x44\x4a\x80\x92\x70\x23\x85\x8e\xa6\xb2\xb4\x6b\xa7\xa8\xfb\xed\xcd\xfe\xd3\xdd\xac\x8a\xde\x66\x9e\xf4\xc9\xfc\x9e\x99\x4e\x26\xf0\x62\xff\x3d\xd8\x0c\x63\x91\xe3\x7f\x7a\xce\x18\x9b\xf1\x3b\x21\x41\xad\x53\xb9\x49\xe7\x4a\x2c\xe5\x94\x01\xcc\xd7\x3c\x55\x1c\x54\x3a\xbb\xe7\x20\x6e\x41\x2e\x15\xf0\x9d\xd8\xa8\x0d\x10\x12\x59\xef\x28\x61\x00\x00\x27\x2c\x80\x62\xb0\xee\x71\x5c\xf5\x46\x47\x0d\x87\xcc\x1f\xea\xf6\x18\x50\x47\x34\x7b\xef\x20\xda\x33\xd6\xe2\x25\x37\x43\x11\xdf\x72\x1b\x90\x5a\x71\x74\x85\x22\x6a\x3a\x35\x08\x97\x8b\x35\x7d\x06\xef\x10\x0e\xde\x67\xcd\x38\xc2\xb0\xb7\x06\xac\x8b\xb5\x90\x07\xff\x84\xc7\xd8\xd3\x5a\x50\x1d\xbf\x00\x6d\xc4\x6b\x4c\xe5\xa0\x96\x89\x30\x38\x7d\xc6\x1e\x57\xae\x89\x5e\x7d\x30\x9d\xfd\xe0\x59\xdb\xac\xf7\xe8\x1b\x90\xbf\x70\x34\xf9\x3a\x28\xbd\xa8\x03\xae\x5f\x67\xff\x1c\xbb\x95\x62\xb5\xe5\x20\xe4\x0d\xdf\xc1\x76\xc5\xf7\x55\x76\xf0\xae\x5e\x02\x24\xed\x02\xc6\x55\xc2\x2e\xf1\xc0\x5a\x9d\xb2\xb4\xd6\x45\x52\xde\xf3\x47\x43\xfb\x03\x4b\xcf\x47\x9d\x9c\xb0\x18\x4d\xd9\x7c\xb9\x58\x08\x35\x65\x8c\xbd\x07\x00\x00\xff\xff\xc9\x00\x56\xe2\xec\x02\x00\x00")

func scriptsUpQlBytes() ([]byte, error) {
	return bindataRead(
		_scriptsUpQl,
		"scripts/up.ql",
	)
}

func scriptsUpQl() (*asset, error) {
	bytes, err := scriptsUpQlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/up.ql", size: 748, mode: os.FileMode(420), modTime: time.Unix(1469793286, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/up.ql": scriptsUpQl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"up.ql": &bintree{scriptsUpQl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

