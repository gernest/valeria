// Code generated by go-bindata.
// sources:
// js/init.js
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsInitJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x50\xcd\x6a\x84\x30\x10\xbe\xef\x53\xcc\x51\x61\xf1\x01\x94\x9e\x5a\x7a\xe8\xa1\x2d\xec\x42\x8f\x4b\xd0\xd1\x0d\xc4\xd9\x34\x99\x08\x22\xbe\x7b\x89\xd1\x8d\xe6\xd0\x5c\x42\xbe\xbf\xcc\x7c\x83\x30\xf0\xe3\xe0\x65\x3a\x01\x00\xb0\x56\xef\x8e\x6a\x5b\x4e\xf3\x79\x01\xb4\x72\x9d\xa4\xf8\x6e\xa5\x42\x0b\xa5\xbf\xae\x06\x31\xcb\x03\xdc\x21\x5f\x37\x6b\xeb\xa8\x66\xf9\xa0\x2c\x0f\x99\xfe\x18\x64\x67\x08\x6e\x45\x2f\x74\xc6\x77\x69\x8b\xed\xa7\x33\x3c\xf5\x43\x3e\xad\xba\xa1\x9a\xf3\x6a\x31\x6f\x63\x18\xd4\xc2\x60\xcc\xd6\x4a\xd0\x2e\x5f\xb6\x90\x42\xfe\xdc\x0a\x14\xf5\x7d\x61\x8a\x37\xd4\x48\x0d\x52\x3d\xee\xbe\x44\x95\x38\xc2\xb0\xbf\x4e\x1a\xf4\x64\x75\x20\xe7\xe4\xbd\x4e\xcb\xc6\x61\x24\xe6\x74\xe9\x56\x28\x8b\x87\x6d\xec\x68\x19\xfb\xd2\xdf\xcf\xfa\x2e\x2b\xf6\x4f\x7b\x4b\x6f\xc1\x7b\x8c\x43\x7e\x75\x96\x1f\xfd\xb7\x12\xb4\x4b\x48\x0a\x11\x4d\x13\x65\xd9\xc7\xe5\xeb\xb3\xb0\x6c\x24\x75\xb2\x1d\x83\x36\x76\x3e\x57\xa7\xd3\x5f\x00\x00\x00\xff\xff\x11\xd6\x74\x22\x1a\x02\x00\x00")

func jsInitJsBytes() ([]byte, error) {
	return bindataRead(
		_jsInitJs,
		"js/init.js",
	)
}

func jsInitJs() (*asset, error) {
	bytes, err := jsInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/init.js", size: 538, mode: os.FileMode(420), modTime: time.Unix(1472625974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/init.js": jsInitJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"init.js": &bintree{jsInitJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

