// Code generated by go-bindata.
// sources:
// js/init.js
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsInitJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x52\xcd\x8a\xdb\x30\x10\x3e\x5b\x4f\x31\xdd\xcb\xca\xb0\xe8\x01\x62\x74\x2a\xf4\xd0\xc3\x6e\x21\xb9\x95\x52\x84\x33\x8a\x0d\x8a\xa4\x8e\xe4\x2e\xc6\xe8\xdd\xcb\x48\x71\x12\x3a\xf8\x30\xdf\x37\xdf\xfc\xc9\xf3\xd7\x10\x1c\xd7\x94\xf1\xaa\xd3\x9a\x64\x3f\x08\x66\x4e\xd1\xe9\xad\x34\xdf\x26\x4d\xf8\x67\x99\x09\xe5\xab\x4d\xaf\xfd\x20\x4e\xd1\x29\xbb\xf8\x31\x55\x0d\xa3\x0b\xe6\x53\x74\xdf\x2a\xc7\x91\x3c\x07\x2f\xfb\x4d\x74\x5c\x80\x52\xd6\x3f\x7f\x0d\xa2\xb3\x81\x40\x32\x13\x29\x44\x98\x3d\xdc\x0b\xb1\xb4\x9b\x2d\xc8\x3b\xa3\x26\x93\x3e\x3e\xfd\x0f\x0a\x11\x29\xaf\x92\x53\xfa\x2a\xeb\x28\x65\x15\x97\x34\x35\x6e\x10\x5d\x57\x04\x7f\x84\x79\x21\xcf\xed\x06\x51\x06\x21\xf6\x41\xe0\x82\xf9\xeb\x42\x84\x3e\x1f\x79\xc5\xed\x2e\xfd\x7e\xfc\x78\x57\x29\xd3\xec\x2f\xb3\x5d\x65\x7b\x87\x7e\x10\xe5\x29\x39\x52\x18\x31\x25\x69\x67\x87\xef\xe6\x8a\xfd\x26\x00\xea\xbb\xcc\x0e\x41\x33\x02\xf0\xe6\x8a\x07\xd8\x25\x6f\x95\x1b\x83\xcf\xe8\x73\x3a\xc0\xcb\x4b\x63\xae\x98\xcd\x61\x2b\x0c\xca\x20\x00\x32\xad\x2d\xbd\x96\xd3\x36\xa9\x10\xd1\x3f\x3a\x0d\x35\xc8\x50\xed\xc5\xb4\x55\x84\xe6\x2c\xf7\x98\x1a\x5d\x48\xd8\x60\x19\x4d\x1e\x27\xd9\x26\x04\xc8\x13\x85\x4f\xc0\x1a\x11\x00\xb7\x95\xb9\xda\xff\x0b\x62\x34\x84\xb2\x7f\xcc\x12\x9d\xf1\xed\x1c\x14\xbb\xad\x17\xff\x1e\x46\x5f\xb4\xf6\x8b\x73\x37\x39\xdb\x6f\x85\x66\x9c\x6a\x50\x9d\x31\xa2\x3f\xa3\x1f\xd7\x37\xb8\x5f\x02\x3e\xab\x77\xdb\x8f\x0a\xdd\x6d\x19\xb6\xf2\xe4\xdf\x26\xce\xb4\x60\x23\x8b\x78\xa2\xad\x71\xa9\x6d\x22\xfe\x05\x00\x00\xff\xff\xd3\x17\xf0\xe2\xc4\x02\x00\x00")

func jsInitJsBytes() ([]byte, error) {
	return bindataRead(
		_jsInitJs,
		"js/init.js",
	)
}

func jsInitJs() (*asset, error) {
	bytes, err := jsInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/init.js", size: 708, mode: os.FileMode(420), modTime: time.Unix(1472381216, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/init.js": jsInitJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"init.js": &bintree{jsInitJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

