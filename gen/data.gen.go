// Code generated by go-bindata.
// sources:
// js/init.js
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsInitJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x92\xc1\x8e\xdc\x20\x0c\x86\xcf\xe1\x29\xac\xbd\x2c\x91\x56\x3c\xc0\xa0\x9c\x5a\xf5\xd0\xc3\x6e\xa5\x99\x5b\x55\x55\x28\x6b\x26\x91\x18\xa0\x86\x74\x15\x45\xbc\x7b\x65\x98\x4c\xa3\x45\x39\xf0\x7f\xfe\x6d\x6c\xc8\x5f\x43\x70\x5e\x53\xc6\xdb\x90\xd6\x24\x7b\x2d\x98\x5c\xa2\x1b\xb6\xd2\xf6\x36\x0d\x84\x7f\x96\x99\x50\x3e\xdb\xf4\xdc\x6b\x71\x89\x4e\xd9\xc5\x8f\xa9\x7a\x58\x5d\x31\x5f\xa2\xfb\x56\x19\x47\xf2\x1c\xbc\xec\x37\xd1\x71\x01\x4a\x79\xf8\xf9\x4b\x8b\xce\x06\x02\xc9\x24\x52\x88\x30\x7b\x78\x14\x62\x6b\x37\x5b\x90\x0f\xa2\x26\x93\xde\x3e\xfc\x0f\x0a\x11\x29\xaf\x92\x53\xfa\x6a\xeb\x28\x65\x15\x97\x34\x35\xa6\x45\xd7\x15\xc1\x1f\x61\x5e\xc8\xf3\x71\x5a\x14\x2d\xc4\xde\x08\x5c\x31\x7f\x59\x88\xd0\xe7\x33\x8f\xb8\x3d\xac\xdf\xcf\x6f\xaf\x2a\x65\x9a\xfd\x75\xb6\xab\x6c\xf7\xd0\x6b\x51\x0e\xc9\x91\xc2\x88\x29\x49\x3b\x3b\x7c\x35\x37\xec\x37\x01\x50\xef\x65\x76\x08\x03\x2b\x00\x6f\x6e\x78\x82\xdd\xf2\x52\xd9\x18\x7c\x46\x9f\xd3\x09\x9e\x9e\x1a\xb9\x61\x36\xa7\xad\xb0\x28\x5a\x00\x64\x5a\x5b\x7a\x2d\x37\xd8\xa4\x42\x44\xff\xff\x24\x5d\x83\x2c\xd5\x5e\x6c\xb0\x8a\xd0\xbc\xcb\x3d\xa6\x46\x17\x12\x36\x59\x46\x93\xc7\x49\xb6\x0e\x01\xf2\x44\xe1\x03\xb0\x46\x04\xc0\x7d\x64\xae\xf6\x79\x40\x8c\x86\x50\x46\x67\xfc\x3d\x95\x5f\xe2\x20\x79\xfd\x56\x68\xc6\xa9\x52\xf5\x15\x23\xfa\x77\xf4\xe3\xfa\x02\x8f\xd7\x46\x77\x70\xef\x6b\xff\x71\xd0\xdd\x1b\xe6\x55\x0e\xfb\x7b\x57\x99\x16\x6c\xb0\x88\x03\xb6\xc6\xa5\xd6\xad\xf8\x17\x00\x00\xff\xff\x18\x7f\x35\xb7\xa8\x02\x00\x00")

func jsInitJsBytes() ([]byte, error) {
	return bindataRead(
		_jsInitJs,
		"js/init.js",
	)
}

func jsInitJs() (*asset, error) {
	bytes, err := jsInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/init.js", size: 680, mode: os.FileMode(420), modTime: time.Unix(1472386786, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/init.js": jsInitJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"init.js": &bintree{jsInitJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

