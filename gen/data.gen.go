// Code generated by go-bindata.
// sources:
// js/init.js
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsInitJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x50\xcd\x6a\xe3\x30\x10\x3e\x5b\x4f\x31\xe4\x12\x19\x16\x3d\x40\x8c\x4f\x0b\x7b\xd8\x43\x52\x48\x6e\xa5\x07\xe3\x8e\x62\x81\x2d\xa9\x33\xe3\x06\x63\xfc\xee\x45\x52\x9d\x52\xd0\x41\xdf\xcf\x7c\xf3\xa3\x3e\x3b\x82\xeb\xc2\x82\x53\xcb\x0b\xeb\xba\xc9\xcc\x2d\x8e\xed\xba\x95\xbf\xe5\x96\xf0\x63\x76\x84\xfa\x68\xf9\x58\x37\xea\x16\x47\x63\x67\xdf\x73\xf6\x24\x74\x47\xb9\xc5\xf1\x5f\xe6\x92\x22\x2e\x78\x5d\xaf\xaa\x4a\x01\xc4\xd2\xbe\xbe\x35\xaa\xb2\x81\x40\x27\x26\x52\x88\xe0\x3c\x3c\x83\x92\xb5\x72\x16\xf4\x93\x31\x43\xc7\x97\x87\x7f\xa1\x10\x91\x64\xd1\xa9\xa4\xce\xb6\x8a\x58\x4c\x9c\x79\x28\x5c\xa3\xaa\x6a\x53\xe9\x11\xca\x4c\x3e\xb5\x6b\xd4\xa6\xd4\x3e\x07\xdc\x51\xfe\xce\x44\xe8\xe5\x9a\x36\x5c\x9f\xce\xff\xd7\xcb\xd9\xb0\x90\xf3\x77\x67\x17\x5d\xce\x50\xff\x2e\x8e\x14\x7a\x64\xd6\xd6\x8d\x78\xee\x26\xac\x57\x05\x90\xcf\xe2\x46\x84\x36\x21\x00\xdf\x4d\x78\x82\xdd\xf2\x27\x73\x7d\xf0\x82\x5e\xf8\x04\x87\x43\x61\x26\x94\xee\xb4\x6e\x09\x6c\x8d\x02\x10\x5a\x4a\x79\x8e\x6b\x2d\x9b\x10\xd1\xff\x74\x6a\xb2\x98\xa0\xd9\xc3\x5a\x6b\x08\xbb\x77\xbd\x6b\xa6\x1f\x03\x63\x81\x5b\xdf\x49\x3f\xe8\x32\x21\x80\x0c\x14\x1e\x80\x59\x51\x00\xdf\x2b\xa7\xb4\xbc\xe0\x57\x00\x00\x00\xff\xff\x03\xf4\x41\x0e\xf9\x01\x00\x00")

func jsInitJsBytes() ([]byte, error) {
	return bindataRead(
		_jsInitJs,
		"js/init.js",
	)
}

func jsInitJs() (*asset, error) {
	bytes, err := jsInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/init.js", size: 505, mode: os.FileMode(420), modTime: time.Unix(1472225002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/init.js": jsInitJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"init.js": &bintree{jsInitJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

