// Code generated by go-bindata.
// sources:
// templates/footer.html
// templates/header.html
// templates/home.html
// DO NOT EDIT!

package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _footerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xcb\xcf\x2f\x49\x2d\xb2\xe3\xb2\xd1\x47\xb0\x92\xf2\x53\x2a\x41\x74\x46\x49\x6e\x8e\x1d\x17\x17\x20\x00\x00\xff\xff\xca\xa1\xc0\x16\x24\x00\x00\x00")

func footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_footerHtml,
		"footer.html",
	)
}

func footerHtml() (*asset, error) {
	bytes, err := footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.html", size: 36, mode: os.FileMode(420), modTime: time.Unix(1471687536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x31\x4f\xfb\x30\x10\xc5\xe7\xe4\x53\xf8\xef\x3d\xf1\x1f\xb1\x20\xe1\x64\x29\xb0\xc2\x10\x06\x46\xe3\x5e\xf1\x85\xc4\x49\x7d\x97\xd2\xa8\xea\x77\x47\xae\x8b\x4a\x85\x10\x42\x4c\xb6\xcf\xef\xfd\xce\xcf\x3a\xfd\xef\xe6\x7e\xd1\x3c\x3d\xdc\x0a\xc7\x7d\x57\xe7\x3a\x2d\x99\x76\x60\x96\x75\x9e\x65\xba\x07\x36\xc2\x31\x8f\x05\xac\x27\xdc\x54\x72\x31\x78\x06\xcf\x45\x33\x8f\x20\x85\x4d\xa7\x4a\x32\x6c\x59\x45\xf7\xb5\xb0\xce\x04\x02\xae\x1e\x9b\xbb\xe2\x4a\x0a\x75\xe2\x78\xd3\x43\x25\x97\x40\x36\xe0\xc8\x38\xf8\x4f\x80\x83\x30\x2a\x3b\xf4\xaf\x22\x40\x57\x49\x72\x43\x60\x3b\xb1\x40\x1b\xa5\x2e\xc0\xaa\x92\x8a\xd8\x30\x5a\x85\xfd\x8b\x5a\x99\x4d\xbc\x2a\xd1\x0e\x1f\x7d\x0e\xee\x73\xa5\x25\x52\x04\xbd\xf1\x8c\xb6\xec\xd1\x97\x96\x48\x1e\x3b\xf0\xdc\x01\x39\x00\xfe\xc1\xff\x36\x6d\xd1\x7c\x6f\x8c\xce\x14\x4a\xf0\x3c\xc2\xf1\x3b\x5a\xb3\x31\xa9\x2a\x05\x05\x7b\x22\xb6\xa4\xda\xf5\x04\x61\x2e\x2e\xcb\x8b\xf2\xff\xe1\x51\x2d\xc9\x5a\xab\x24\xaf\x7f\xcf\x3b\x0b\xf8\x47\x56\x0a\xfb\x05\xc2\xc8\x1d\xd4\xbb\x5d\xd9\xc4\xcd\x7e\xaf\x55\xaa\xe4\x99\x56\xc7\x79\xd1\xcf\xc3\x72\xae\xf3\xf7\x00\x00\x00\xff\xff\x76\x4e\x30\xbd\x57\x02\x00\x00")

func headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_headerHtml,
		"header.html",
	)
}

func headerHtml() (*asset, error) {
	bytes, err := headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.html", size: 599, mode: os.FileMode(420), modTime: time.Unix(1472669403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x58\x4b\x93\xdb\x36\x12\xbe\xfb\x57\xf4\x6a\x0f\xbe\x8c\xa4\x4a\xe2\xa3\xac\xad\xc9\x78\xc7\x9e\x2a\x3b\x76\x32\x93\xf2\xe6\xd8\x24\x5a\x04\x76\x40\x34\xdd\x68\x8a\x56\x52\xf9\xef\x5b\x20\xf5\xa0\x24\xea\xe1\x4d\xe5\x34\xe4\x80\x68\x00\xfd\x3d\xba\xa1\x3f\xfe\x00\xa5\xb2\xf2\xa8\x04\x23\x4b\x68\x48\x26\x56\x4b\x3f\x82\xc9\x9f\x7f\xbe\x98\xfd\x63\x3c\x86\x7b\xf6\x9e\x1b\x17\x0a\xf8\x40\xa1\x86\xf1\x78\xfe\x62\x66\xdc\x12\x72\x8f\x31\xbe\x1e\xd5\x0e\x3c\x4a\x41\xa0\x5c\xc1\xc2\x7d\x25\x03\xd6\x19\x43\x01\x4a\x0a\xf5\x68\xfe\x02\xe0\xe0\xf3\x9c\x83\xa2\x0b\x24\xed\x20\xc0\x0c\x37\x83\x98\xab\x5b\x12\x38\xa5\x72\x34\x7f\xc7\x25\xcd\xa6\x78\xf8\x4d\x37\xf8\x99\xe5\xf9\xe4\xe0\x1d\x97\x15\x86\xd5\xe9\x71\x14\x22\x89\xbb\xf1\xde\xfe\xc4\x15\x56\x77\x5b\x3f\x1c\xee\x02\xac\x07\xfa\x91\x6b\x07\x59\xad\xca\x61\x34\x7f\xcf\x05\xb8\xb0\x8d\x0e\x30\x9b\x1a\xb7\xfc\xd6\x68\x95\xb8\x12\x65\xb5\x8d\xfa\xe8\x8a\x00\xbf\x56\xc3\x61\xb7\x8f\xeb\x87\xf5\x9f\x0e\xc0\x47\x67\x28\x43\x39\x09\xdf\x92\x44\x5d\x8e\x1e\x5c\x48\x8f\x64\x20\xae\x67\xec\x10\xbc\x08\xd1\x19\x80\xce\xc3\x73\x1e\x9c\xc3\xd1\xf7\x5c\x6c\x53\x7b\x38\x96\x32\x54\x77\x09\xda\x9c\xbf\x4b\xc0\x27\x2c\x08\xee\x38\x28\x05\x8d\x47\x19\xa8\xea\x68\xd7\x5c\x3c\x48\xcc\x36\x1f\xdb\x0c\x95\x18\x35\xa9\x04\x72\x0a\x4a\x02\xe8\x5d\x11\x52\xc2\xa8\x28\x29\xe8\x68\xfe\xe2\x88\x50\x03\x84\x3f\xfa\xa0\x13\x50\xa4\x9c\x83\x49\x98\x6f\x17\xae\xd8\x05\x4d\xd2\xdb\x23\x64\xff\xe8\xca\x39\x1c\xd0\x08\x60\xe6\x36\xc3\x1b\x24\x5d\x9e\x38\x34\x9b\xba\x5e\x8c\x1d\x93\xae\xd3\xe0\x45\x1d\x5e\xa3\xc5\x6b\xf4\x38\xac\xc9\xe3\x53\xe2\x10\x56\x27\x55\x78\x79\xca\xb1\xc4\x0e\xb5\x7b\xa4\xb8\x21\xb8\x95\xbe\xea\x10\xe6\xf6\xbb\xa1\xc5\x3b\xd3\xed\x1d\xec\xa1\xc4\xc2\x05\x1a\xe3\x78\x9d\xbb\xed\xe2\xf6\xbb\x5d\xac\xef\xe7\x6f\x18\x1a\x8b\x4a\x4b\x12\x58\x71\x0d\x0d\x06\x85\xc6\x52\xd8\xbd\x29\x4f\x66\x53\xfb\xfd\x09\xd6\xd9\xba\xa0\x23\x9b\x79\x4b\x0a\x8f\x8a\xed\xd6\x76\x34\xea\x10\x40\x11\x6e\x7a\x54\x1a\x4c\x47\xef\xe9\x84\xcd\x44\x15\x57\x51\x4f\x33\x03\x7b\x2b\x9d\x31\x9e\x76\xfa\x52\xcc\x9f\x31\xf3\x04\x85\x38\x73\x41\x50\xc2\xcd\x68\x98\x48\xd4\x1e\xa3\x71\x86\x20\x67\x5f\x97\x61\x9f\x4f\xf6\x87\x7e\x76\xd6\xb8\x7c\x26\x78\x47\xbe\x82\x0e\x0c\x47\x11\x30\x98\xcd\x1b\x87\x38\x9b\xda\x1f\xf6\xa2\x54\x69\x4a\x8e\x01\x8a\xa4\xa3\x15\xd7\x02\x79\x07\x24\xc4\xba\x22\xa9\xb8\x21\x89\xa0\x0c\x86\x41\xad\x0b\x45\x04\xb5\xa8\xa0\x96\x56\x10\x5a\x3c\xd5\x72\x9d\xb6\x5a\x71\x8c\x2e\xf3\x34\x81\xf7\xa4\x50\x47\x30\xe4\xdb\x33\x74\x61\xeb\xa8\x5c\xa6\x60\x69\x4b\x54\xb6\x91\xbb\xa1\x40\x64\xe2\x64\x32\x51\x2b\x29\x12\x54\xb5\x10\x18\x54\x04\x0c\xe8\x57\xea\xf2\x38\x99\x4d\xab\xab\x8e\xff\x01\x9f\x09\x7e\xc4\x80\x01\x23\x3c\xa5\x9d\xde\x61\x80\x37\x18\x72\x1a\x38\xfc\x6f\xd4\x1d\xe7\x65\x84\x96\x35\x37\x2d\x1d\x37\x07\x72\x0a\x0d\xa6\x0f\x08\xa2\xd6\x8b\x05\xf0\x02\x8c\x10\x96\xf1\x26\x51\x10\x68\x49\x01\xb2\xf5\x5a\x29\x89\x19\x41\xe6\x98\x42\x92\x04\x09\x99\xfd\x5d\xef\xa9\x73\x1f\xeb\xe8\xbe\x76\x48\x77\xdc\x5d\x78\xc6\xc4\xe9\x21\xdc\x5d\x59\x40\x94\xfc\xf5\x08\x63\x24\x8d\x53\x57\x62\x41\x71\xda\x38\xa1\x85\x60\x49\xd3\xc6\x3a\xa5\x71\xfb\xef\x49\x15\x8a\xd1\x91\x75\x67\x2c\x26\xed\x0e\x84\xeb\x60\xc8\x40\xfb\xed\xe8\xb2\x8d\x5c\xcb\xdc\x83\x7a\x33\x74\x0a\x3c\x94\xf6\x46\xd2\x77\x96\xf2\x67\x78\xb2\x54\xc2\xc7\x5a\xbf\xc5\xdd\x76\x6a\xbe\x2c\xe7\x2f\x35\xeb\x05\x51\xd3\x97\x1a\x7d\x02\x45\x6d\x4f\xd1\x2e\x9d\x2c\xa0\xf7\x2b\xc8\xc9\x7b\x32\xad\xc6\x07\x95\x7d\x90\x85\x33\xe9\x1a\x54\xf7\x7c\xf4\x39\xb1\x17\xd7\xea\x5d\x8d\x06\xe8\xdb\xf2\xdb\xc5\xd6\x5a\x3b\x45\xa2\xf7\x10\x71\x05\x98\x71\x9d\x34\x78\x2d\x01\x4f\xed\xe1\x01\xa2\xe5\xda\x9b\xf0\x52\xc1\xe2\x92\xa0\xe0\x40\xd0\x38\xb5\x69\x3d\xd7\xb9\x05\xa9\x53\x96\xc9\xd0\x0e\x7b\x6f\xa7\xb9\x8b\x4b\x54\x94\x69\xc0\x30\xf9\x6f\xb5\x47\xd8\x6e\x64\x43\x50\x98\x65\xf3\x9f\x30\xcc\xa6\xd9\x1c\xee\xac\xa3\x05\xdc\xd7\x01\x3e\x2e\x16\x2e\x27\x81\xdb\xbc\x24\x78\xe2\x55\xec\xef\xe0\xe4\xf1\xcf\xf1\xe7\xaf\x55\x83\x93\x15\x75\xc8\xb1\x7e\x14\xc2\xe7\xd4\x33\x3d\x59\x82\xb7\xe2\xcc\x0d\xbc\x15\xcc\x22\xfc\x96\x8c\xf1\x56\x53\x17\xe8\x38\xf4\x33\x3b\xab\xe6\x0f\x21\x6a\x6a\xec\x78\x01\x0b\xce\xeb\x98\x02\x70\x68\x17\xa5\xa0\x90\x0b\x61\x9a\xd5\x3a\xad\x45\x31\xd0\xb0\x3c\xdf\x40\x43\x1d\x86\x9e\x50\x12\x25\x2d\x37\xc9\xd9\x53\x9f\xd8\xda\x38\x01\x8a\xb6\x26\xc7\x29\x62\xe0\xd6\xf0\x21\x5b\x41\x25\xbc\x74\xa6\xed\xed\x30\xc6\x54\x2a\xb0\xe4\x3a\x35\xa8\xbc\x80\xd6\x70\x62\x85\x39\xb5\x0b\x16\x14\x48\x5c\xbe\xdd\x4d\x5b\x2e\x92\x3b\x46\xa2\x72\x33\xff\x06\x4a\x0e\xec\x9d\x5a\x97\xb7\xb3\x1a\x16\xb5\x5d\x39\xc0\xcd\xa9\xfb\xf6\xb9\xe7\x18\x6b\x1f\x5b\x5b\xc6\x2f\x29\x15\x1f\x58\xfa\xcd\xdf\xcc\xbe\xea\x67\x9b\xc5\xfd\x9e\x10\xf1\xeb\xc4\x83\x71\x4b\xb7\xdf\xc9\xcc\x10\xac\xd0\xe2\xf5\xe8\x9f\xa9\xc7\x8b\x04\x8f\x5a\x1b\x47\x71\xef\x0e\x63\x5f\x9d\x87\xf3\x8d\x33\xf0\x99\xe0\x89\xbc\x4f\x08\xc2\x6d\x2b\xc3\x8f\xb5\x6c\x4a\xd2\xbf\x0e\x90\x4c\x05\xe8\x01\x9e\x03\x37\x6d\xe5\xa9\x84\x33\xcc\xfc\x0a\x8c\x8b\x42\x05\x4a\xb2\xe7\x04\x0c\xa1\x78\x47\x02\x19\x63\xd4\x08\x18\x21\x70\x18\x47\xfa\x52\x3b\xad\x05\x16\xce\x7b\x92\x4d\xca\xbb\xea\xe4\x34\x82\x50\x6b\x55\x2a\x35\x4d\xe0\x21\xf5\x58\xfc\x0c\x2b\x42\x69\x81\x4b\x48\x41\xac\xbc\xcb\x13\xb2\x09\x85\x9c\xcb\xcc\x05\x54\x96\x15\xbc\xf9\xe9\x16\x84\x22\xa1\xe4\xb6\x8b\x98\xc0\xe9\x97\xbb\x75\x74\x93\x8a\xeb\x95\x58\x3d\xbc\x2c\xe1\x51\x9d\xf7\xf0\x73\xed\x94\xe0\x21\x79\x24\x45\x25\xb3\xbb\xe0\x5e\xb6\xf3\xe3\xbb\xce\x82\x39\x71\xf8\xac\x30\x2f\xde\x6c\xfa\x36\xbf\x5e\xa0\xe3\x89\x59\x57\x03\xdb\xf5\x64\xfb\x0d\xde\x09\x57\x57\x2b\x44\x67\xda\xb7\x57\xe7\xfa\xeb\x96\x37\x7d\xba\x0d\xec\x76\x3b\xc9\xbb\xf0\x0c\xde\x45\x1d\x1d\xd8\xed\x8e\xd1\x87\x77\x4f\xa5\x12\xab\x83\xeb\xc6\x99\x09\xe9\x3a\x8a\xb9\xc2\xaf\xf1\xfa\x39\xbf\xa4\xe6\xcf\x71\x1d\xe1\x8e\x84\x4a\x0e\xfb\x5a\xba\x30\xfb\x2d\xfe\x4e\x19\xc3\x27\x8f\xe1\x70\xd6\x61\x15\x3b\x5d\xd4\xfe\x12\x04\x8f\x24\x4b\x97\xa7\x3d\xff\x4d\x28\x74\x8e\x00\x9f\x84\xc6\x1f\x53\x43\x76\x7d\x72\x92\x32\xef\x6f\x7f\xbe\x7e\xc2\x3b\x6e\xe0\x89\xe1\x36\xcf\x29\x7e\x03\x08\xf7\xb8\x64\x49\x2a\xfd\xcf\xf8\x03\x1d\xdd\x4e\xaf\x86\x21\xb6\x7d\xf2\xff\x09\xc3\x7d\x27\xec\x77\xed\xeb\x11\x16\xd5\xfc\xdf\x5f\x55\x10\xba\xea\xb3\x60\x01\x84\x3c\xf5\x40\xca\x80\x79\x5b\x03\x5d\x88\x69\xe5\x64\xa2\x6b\x93\xe8\x0a\x52\xea\x6a\xc0\xa6\xcb\x92\xd0\x98\x42\x81\x05\x41\x1d\x49\xe2\x99\xa6\xfd\xf2\x8f\x58\x7b\x3f\x51\x76\xeb\xf5\x7e\xa2\xfc\x5f\x00\x00\x00\xff\xff\x82\x89\x94\xb5\xc1\x14\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 5313, mode: os.FileMode(420), modTime: time.Unix(1472669796, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"footer.html": footerHtml,
	"header.html": headerHtml,
	"home.html": homeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"footer.html": &bintree{footerHtml, map[string]*bintree{}},
	"header.html": &bintree{headerHtml, map[string]*bintree{}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

