// Code generated by go-bindata.
// sources:
// templates/footer.html
// templates/header.html
// templates/home.html
// DO NOT EDIT!

package views

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _footerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xcb\xcf\x2f\x49\x2d\xb2\xe3\xb2\xd1\x47\xb0\x92\xf2\x53\x2a\x41\x74\x46\x49\x6e\x8e\x1d\x17\x17\x20\x00\x00\xff\xff\xca\xa1\xc0\x16\x24\x00\x00\x00")

func footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_footerHtml,
		"footer.html",
	)
}

func footerHtml() (*asset, error) {
	bytes, err := footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.html", size: 36, mode: os.FileMode(420), modTime: time.Unix(1471687536, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x41\x4f\xc3\x20\x14\xc7\xcf\xed\xa7\x40\xee\x2b\x57\x13\xa1\xc6\x6c\x7a\xd5\xc4\x6a\xe2\x11\xdf\xde\x84\xd9\x52\x84\xb7\xc6\x86\xf4\xbb\x1b\xc6\x8c\x66\x89\x89\xa7\x96\x7f\xf8\xfd\xfe\x0f\x90\x17\x9b\xfb\x75\xf7\xf2\x70\xcb\x0c\x0d\x7d\x5b\xcb\xf2\xa9\xa4\x41\xbd\x6d\xeb\xaa\x92\x03\x92\x66\x86\xc8\xaf\xf0\xe3\x60\x27\xc5\xd7\xa3\x23\x74\xb4\xea\x66\x8f\x9c\x41\x59\x29\x4e\xf8\x49\x22\xd3\x57\x0c\x8c\x0e\x11\x49\x3d\x75\x77\xab\x4b\xce\xc4\x8f\xc7\xe9\x01\x15\xdf\x62\x84\x60\x3d\xd9\xd1\xfd\x12\xa4\xf4\x68\x09\x9b\x0d\x46\x58\x96\x23\x95\xb1\xde\xba\x77\x16\xb0\x57\x3c\x9a\x31\x10\x1c\x88\x59\xc8\x9c\x09\xb8\x53\x5c\xd8\xe1\x4d\xec\xf4\x94\xb3\xc6\xc2\xf8\xdd\x76\xc4\x4e\x5b\x20\x46\x11\x71\xd0\x8e\x2c\x34\x83\x75\x0d\xc4\x78\x3d\xa9\x94\x6e\xbc\x7f\xc6\x90\xcb\x4a\x01\xcd\x3d\x46\x83\x48\x7f\x59\x3c\x6a\x30\xff\xc6\xb3\xa1\x1c\x94\xd1\xec\xf1\x74\x45\x7b\x3d\xe9\x92\x72\x16\x03\x28\x2e\xf6\x67\xe3\xed\xcf\xf4\xad\x14\x05\x38\xce\x44\x96\x7a\x6c\x53\x6a\xba\xfc\xb3\x2c\x52\x94\xa4\xae\xa4\x38\x3d\x9a\x7c\x1d\xb7\x73\x5b\x7f\x05\x00\x00\xff\xff\xf0\xb6\x6e\x07\xdc\x01\x00\x00")

func headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_headerHtml,
		"header.html",
	)
}

func headerHtml() (*asset, error) {
	bytes, err := headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.html", size: 476, mode: os.FileMode(420), modTime: time.Unix(1471687436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x28\x49\xcd\x2d\xc8\x49\x2c\x49\x55\x50\xca\x48\x4d\x4c\x49\x2d\xd2\xcb\x28\xc9\xcd\x51\x52\xd0\xab\xad\xe5\x52\xb0\xc9\x30\xb4\x53\xc8\x48\xcd\xc9\xc9\x57\x28\xcf\x2f\xca\x49\x51\xb0\xd1\xcf\x30\xb4\xe3\x42\xd1\x95\x96\x9f\x5f\x82\xa2\x0b\x10\x00\x00\xff\xff\x12\xe9\x13\x7e\x54\x00\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 84, mode: os.FileMode(420), modTime: time.Unix(1471687728, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"footer.html": footerHtml,
	"header.html": headerHtml,
	"home.html": homeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"footer.html": &bintree{footerHtml, map[string]*bintree{}},
	"header.html": &bintree{headerHtml, map[string]*bintree{}},
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

